<?php

/**
 * @file
 * Process payments using Agms HPP Payment Gateway. 
 *
 */

define('UC_AGMS_GATEWAY_TRANSACTION_URL', 'https://gateway.agms.com/roxapi/agms.asmx');
define('UC_AGMS_GATEWAY_HOSTED_FORM_URL', 'https://gateway.agms.com/roxapi/AGMS_HostedPayment.asmx');

/****
 * Hook Functions (Drupal)
 ***/

/**
 * Implementation of hook_menu().
 */
function uc_agms_hpp_menu()
{
  $items['agms_hpp/complete'] = array(
    'title' => 'Payment complete',
    'page callback' => 'uc_directone_complete', 
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK
  );

  return $items;
}

/****
 * Hook Functions (Ubercart)
 ***/

/**
 * Implementation of hook_payment_method().
 */
function uc_agms_hpp_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_agms_hpp');
  $title = variable_get('uc_agms_hpp_title', t('Credit Card though AGMS Hosted Payment Page'));
  
  $methods[] = array(
    'id' => 'agms_hpp',
    'name' => t('Agms HPP'),
    'title' => $title,
    'callback' => 'uc_payment_method_agms_hpp',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
  
}



/**
 * Implements hook_form_alter().
 */
function uc_agms_hpp_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'uc_payment_gateways_form') {
    $form['#submit'][] = 'uc_agms_payment_gateway_settings_submit';
  }
  if ($form_id=='uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order']))>0)
  {
    $order = uc_order_load($order_id);
    if ($order->payment_method == 'HPP')
    {
      global $user, $response;
      
      if (is_array($order->products)){ 
        // Build a description of the order for logging in Agms Payment Gateway.
        $description = array();
        foreach ((array) $order->products as $product) {
          $description[] = $product->qty .'x '. $product->model;
        }

        $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
        $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));

        $amount = $order->order_total;
        $tax = 0;
        if (module_exists('uc_taxes'))
        {
          foreach (uc_taxes_calculate($order) as $tax_item)
          {
            $tax += $tax_item->amount;
          }
        }
      

        $reply_url = url('agms_hpp/complete',array('absolute'=>true)).$prefix.'order_id='.$order->order_id.'&response_amount=';
      
        // Build the params for the transaction.     
        $params = array(
          // Merchant Information
          'GatewayUserName' => variable_get('uc_agms_username', ''),
          'GatewayPassword' => variable_get('uc_agms_password', ''),

          // Transaction Information
          'TransactionType' => ($preauth?t('auth'):t('sale')),
          'PaymentType' => 'creditcard',
          'RetURL' => $reply_url,

          // Payment Information
          'Amount' => _uc_agms_format_amount($amount),
          'Tax' => _uc_agms_format_amount($tax),
          'CCNumber' => $order->payment_details['cc_number'],
          'CCExpDate' => sprintf("%02d%02d", $order->payment_details['cc_exp_month'], substr($order->payment_details['cc_exp_year'], -2)),
          'CVV' => $order->payment_details['cc_cvv'],
          
          // Order Information
          'OrderID' => $order->order_id,
          'OrderDescription' => substr(implode(', ', $description), 0, 255),

          // Customer Information
          'FirstName' => substr($order->billing_first_name, 0, 50),
          'LastName' => substr($order->billing_last_name, 0, 50),
          'Company' => substr($order->billing_company, 0, 50),
          'Address' => substr($order->billing_street1, 0, 60),
          'Address2' => substr($order->billing_street2, 0, 60),
          'City' => substr($order->billing_city, 0, 40),
          'State' => substr(uc_get_zone_code($order->billing_zone), 0, 40),
          'Zip' => substr($order->billing_postal_code, 0, 20),
          'Country' => !$billing_country ? '' : $billing_country[0]['country_iso_code_2'],
          'Phone' => substr($order->billing_phone, 0, 25),
          // 'x_fax' => substr('', 0, 25),
          'Email' => substr($order->primary_email, 0, 255),
          'PONumber' => substr($order->uid, 0, 20),
          'IPAddress' => substr(ip_address(), 0, 15),

          // Shipping Information
          'ShippingFirstName' => substr($order->delivery_first_name, 0, 50),
          'ShippingLastName' => substr($order->delivery_last_name, 0, 50),
          'ShippingCompany' => substr($order->delivery_company, 0, 50),
          'ShippingAddress' => substr($order->delivery_street1, 0, 60),
          'ShippingAddress2' => substr($order->delivery_street2, 0, 60),
          'ShippingCity' => substr($order->delivery_city, 0, 40),
          'ShippingState' => substr(uc_get_zone_code($order->delivery_zone), 0, 40),
          'ShippingSip' => substr($order->delivery_postal_code, 0, 20),
          'ShippingCountry' => !$delivery_country ? '' : $delivery_country[0]['country_iso_code_2'],

        );

        $post_url = UC_AGMS_GATEWAY_HOSTED_FORM_URL;
        
        $header = _uc_agms_hpp_buildRequestHeader("ReturnHostedPaymentSetup");
        $body = _uc_agms_hpp_buildRequestBody($params, "ReturnHostedPaymentSetup");
        watchdog('uc_agms', 'xml: @error', array('@error' => $body), WATCHDOG_ERROR);
        // Setup the cURL request.
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $post_url);
        curl_setopt($ch, CURLOPT_VERBOSE, 0);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
        curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
        $result = curl_exec($ch);

        // Log any errors to the watchdog.
        if ($error = curl_error($ch)) {
          watchdog('uc_agms', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
          return array('success' => FALSE);
        }
        curl_close($ch);

        $response = _uc_agms_parseResponse($result, "ReturnHostedPaymentSetup");

        if (variable_get('uc_agms_response_debug', FALSE)) {
          watchdog('uc_agms', 'Debug response: !data', array('!data' => '<pre>'. check_plain(print_r($response, TRUE)) .'</pre>'));
        }

        // If we didn't get an approval response code...
        if ($response['STATUS_CODE'] != '1') {
          // Fail the charge with the reason text in the decline message.
          $result = array(
            'success' => FALSE,
            'message' => t('HPP Hash Genereation declined: @message', array('@message' => $response['STATUS_MSG'])),
            'uid' => $user->uid,
          );
        }
        else {
          $url =' https://gateway.agms.com/HostedPaymentForm/HostedPaymentPage.aspx?hash=' . $response['HASH'];
          $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit Order'),
          );
        }

      }
      else
      {
        drupal_set_message('<pre>Missing product array?</pre>');
      }
    }
  }
}

// Submit handler for payment gateway settings form to encrypt fields.
function uc_agms_hpp_payment_gateway_settings_submit($form, &$form_state) {
  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new uc_encryption_class();

    // Encrypt the Login ID, Transaction key, and MD5 Hash.
    if (!empty($form_state['values']['uc_agms_md5_hash'])) {
      variable_set('uc_agms_md5_hash', $crypt->encrypt($key, $form_state['values']['uc_agms_md5_hash']));
    }

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_agms');
  }
}

/****
 * Callback Functions, Forms, and Tables
 ***/

/**
 * Callback for payment gateway settings.
 */
function uc_payment_method_agms_hpp($op, &$arg1)
{
  switch ($op)
  {
    case 'cart-process':
      $_SESSION['pay_method'] = $_POST['pay_method'];
      break;

    case 'settings':
      $form['agms_hpp_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Agms HPP settings'),
      );
      
      $form['agms_hpp_settings']['uc_agms_hpp_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Agms Gateway Username'),
        '#default_value' => variable_get('uc_agms_hpp_username', ''),
      );
      $form['agms_hpp_settings']['uc_agms_hpp_password'] = array(
        '#type' => 'textfield',
        '#title' => t('Agms Gateway Password'),
        '#default_value' => variable_get('uc_agms_hpp_password', ''),
      );
      return $form;
    
    default:
      break;
  }
}


/**
 * uc_agms_hpp_complete
 *
 * This is the callback for the AGMS HPP-only payment completion page; if successful, it marks an order as paid. The caller is logged for review, because merchants will need to confirm AGMS HPP as the caller before processing the order.
 */
function uc_agms_hpp_complete($cart_id = 0)
{
  $ip = ip_address();
  $host = gethostbyaddr($ip);
  
  $order_id = check_plain($_GET['order_id']);
  $amount = (check_plain($_GET['response_amount'])/100);
  watchdog('agms_hpp', t('Receiving new order notification for order !order_id from !host.', array('!order_id' => $order_id, '!host' => $host)));
  
  if (!($order = uc_order_load($order_id)))
  {
    return;
  }
  
  /* It's safe to act on this request if we get this far, and the order is still in checkout. */
  if($order->order_status == t('in_checkout'))
  {
    $comment = t('Payment via AGMS HPP [@host] ($@amount of $@total)', array('@host' => $host, '@amount' => $amount, '@total' => $order->order_total));
    uc_payment_enter($order_id, 'agms_hpp', $amount, 0, NULL, $comment);
    uc_order_comment_save($order_id, $user->uid, $comment, 'admin');
  }
  else
  {
    watchdog('agms_hpp',t('@ip attempted to reprocess order_id @order. Ignored request.', array('@ip' => ip_address(), '@order' => $order->order_id)));
  }
}


/**
 * Convert array to xml string
 * @param $request, $op
 * @return string
 */
function _uc_agms_hpp_buildRequestBody($request, $op='ProcessTransaction')
{
    /*
     * Resolve object parameters
     */
    switch ($op) {
        case 'ProcessTransaction':
            $param = 'objparameters';
            break;
        case 'ReturnHostedPaymentSetup':
            $param = 'objparameters';
            break;
    }
    $xmlHeader = '<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:xsd="http://www.w3.org/2001/XMLSchema"
           xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Body>
<' . $op . ' xmlns="https://gateway.agms.com/roxapi/">
  <' . $param . '>';
    $xmlFooter = '</' . $param . '>
</' . $op . '>
</soap:Body>
</soap:Envelope>';
    $xmlBody = '';
    foreach ($request as $key => $value) {
        $xmlBody = $xmlBody . "<$key>$value</$key>";
    }
    $payload = $xmlHeader . $xmlBody . $xmlFooter;
    return $payload;
}

/**
 * Builds header for the Request
 * @param $op
 * @return array
 */
function _uc_agms_hpp_buildRequestHeader($op='ProcessTransaction')
{
    return array(
        'Accept: application/xml',
        'Content-Type: text/xml; charset=utf-8',
        'SOAPAction: https://gateway.agms.com/roxapi/' . $op,
        'User-Agent: AGMS HPP Ubercart Plugin',
        'X-ApiVersion: 3'
    );
}

/**
 * Parse response from Agms Gateway
 * @param $response, $op
 * @return array
 */
function _uc_agms_hpp_parseResponse($response, $op)
{
    $xml = new SimpleXMLElement($response);
    $xml = $xml->xpath('/soap:Envelope/soap:Body');
    $xml = $xml[0];
    $data = json_decode(json_encode($xml));
    $opResponse = $op . 'Response';
    $opResult = $op . 'Result';
    $arr = _uc_agms_hpp_object2array($data->$opResponse->$opResult);
    return $arr;
}


/**
 * Convert object to array
 * @param $data
 * @return array
 */
function _uc_agms_hpp_object2array($data)
{
    if (is_array($data) || is_object($data)) {
        $result = array();
        foreach ($data as $key => $value) {
            $result[$key] = _uc_agms_hpp_object2array($value);
        }
        return $result;
    }
    return $data;
}

// Returns the message text for an AVS response code.
function _uc_agms_hpp_avs($code) {
  $text = $code .' - ';

  switch ($code) {
    case 'A':
      $text .= t('Address (Street) matches, ZIP does not');
      break;
    case 'B':
      $text .= t('Address information not provided for AVS check');
      break;
    case 'E':
      $text .= t('AVS error');
      break;
    case 'G':
      $text .= t('Non-U.S. Card Issuing Bank');
      break;
    case 'N':
      $text .= t('No Match on Address (Street) or ZIP');
      break;
    case 'P':
      $text .= t('AVS not applicable for this transaction');
      break;
    case 'R':
      $text .= t('Retry – System unavailable or timed out');
      break;
    case 'S':
      $text .= t('Service not supported by issuer');
      break;
    case 'U':
      $text .= t('Address information is unavailable');
      break;
    case 'W':
      $text .= t('Nine digit ZIP matches, Address (Street) does not');
      break;
    case 'X':
      $text .= t('Address (Street) and nine digit ZIP match');
      break;
    case 'Y':
      $text .= t('Address (Street) and five digit ZIP match');
      break;
    case 'Z':
      $text .= t('Five digit ZIP matches, Address (Street) does not');
      break;
  }

  return $text;
}

// Returns the message text for a CVV match.
function _uc_agms_hpp_cvv($code) {
  $text = $code .' - ';

  switch ($code) {
    case 'M':
      $text .= t('Match');
      break;
    case 'N':
      $text .= t('No Match');
      break;
    case 'P':
      $text .= t('Not Processed');
      break;
    case 'S':
      $text .= t('Should have been present');
      break;
    case 'U':
      $text .= t('Issuer unable to process request');
      break;
  }

  return $text;
}

// Returns the title of the transaction type.
function _uc_agms_hpp_txn_type($type) {
  switch (strtoupper($type)) {
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'CAPTURE_ONLY':
      return t('Capture only');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}

// Returns the Auth.Net transaction type corresponding to a UC type.
function _uc_agms_hpp_txn_map($type) {
  switch ($type) {
    case UC_CREDIT_AUTH_ONLY:
      return 'AUTH_ONLY';
    case UC_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'PRIOR_AUTH_CAPTURE';
    case UC_CREDIT_AUTH_CAPTURE:
      return 'AUTH_CAPTURE';
    case UC_CREDIT_CREDIT:
      return 'CREDIT';
    case UC_CREDIT_VOID:
      return 'VOID';
  }
}



// Decrypts the login data for using Auth.Net APIs.
function _uc_agms_hpp_login_data() {
  static $data;

  if (!empty($data)) {
    return $data;
  }

  $md5_hash = variable_get('uc_authnet_md5_hash', '');

  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new uc_encryption_class();

    // Decrypt the MD5 Hash.
    if (!empty($md5_hash)) {
      $md5_hash = $crypt->decrypt($key, $md5_hash);
    }

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_agms');
  }

  $data = array(
    'md5_hash' => $md5_hash,
  );

  return $data;
}

/**
 * Formats an amount for submission to Authorize.net.
 *
 * @param $amount
 * The raw amount being submitted.
 *
 * @return mixed
 * The amount formatted and rounded for use with Authorize.net.
 */
function _uc_agms_hpp_format_amount($amount) {
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );
  $options = array(
    'sign' => FALSE,
    'thou' => FALSE,
    'dec' => '.',
  );
  return uc_price($amount, $context, $options);
}
